#include <iostream>
#include <vector>
using namespace std;


const int MAX = 10;


const int dx[8] = { 2, 1, -1, -2, -2, -1, 1, 2 };
const int dy[8] = { 1, 2, 2, 1, -1, -2, -2, -1 };


bool isValidMove(int x, int y, int n, vector<vector<int>>& board) {
    return (x >= 0 && x < n&& y >= 0 && y < n&& board[x][y] == -1);
}


bool findKnightTour(int x, int y, int move, int n, vector<vector<int>>& board) {
    
    board[x][y] = move;
    cout << x << " " << y << " " << move << " " << n << " " << endl;

    
    if (move == n * n)
        return true;

    
    for (int i = 0; i < 8; i++) {
        int nextX = x + dx[i];
        int nextY = y + dy[i];

        if (isValidMove(nextX, nextY, n, board)) {
            if (findKnightTour(nextX, nextY, move + 1, n, board))
                return true;
        }
    }

    
    board[x][y] = -1;
    return false;
}


void printBoard(int n, vector<vector<int>>& board) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << board[i][j] << "\t";
        }
        cout << endl;
    }
}

int main() {
    int n, startX, startY;
    cout << "enter the number of rows (columns) of the board: ";
    cin >> n;
    cout << "enter the initial position of the knight (row number and column number of the board): ";
    cin >> startX >> startY;

    
    vector<vector<int>> board(n, vector<int>(n, -1));

    
    if (findKnightTour(startX, startY, 1, n, board)) {
        cout << "matrix of knight's move numbers:" << endl;
        printBoard(n, board);
    }
    else {
        cout << "there is no solution" << endl;
    }

    return 0;
}
