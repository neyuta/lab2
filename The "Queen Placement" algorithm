#include <iostream>
#include <vector>

using namespace std;

bool isSafe(vector<vector<int>>& board, int row, int col, int N) {
    
    for (int i = 0; i < N; i++) {
        if (board[row][i] == 1 || board[i][col] == 1) {
            return false;
        }
    }

    
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1) {
            return false;
        }
    }
    for (int i = row, j = col; i < N && j >= 0; i++, j--) {
        if (board[i][j] == 1) {
            return false;
        }
    }

    return true;
}

bool solveNQueens(vector<vector<int>>& board, int col, int N) {
    
    if (col == N) {
        return true;
    }
    
    for (int i = 0; i < N; i++) {
        if (isSafe(board, i, col, N)) {
            board[i][col] = 1;  

            
            if (solveNQueens(board, col + 1, N)) {
                return true;
            }

            board[i][col] = 0; 
        }
    }

    return false;
    cout << board << " " << col << " " << N << endl;
}

void printBoard(vector<vector<int>>& board, int N) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
}

int main() {
    int N;
    cout << "enter the number of rows (columns) of the board: ";
    cin >> N;

    vector<vector<int>> board(N, vector<int>(N, 0));

    if (solveNQueens(board, 0, N)) {
        cout << "possible positions of queens:" << endl;
        printBoard(board, N);
    }
    else {
        cout << "no solution found." << endl;
    }

    return 0;
}
